1) Full Name: YL


2) Student ID: xxx


3) Platform (Ubuntu version): 32-bit XUbuntu 16.04.7


4) What I have done in the assignment:
In this assignment, I wrote 2 classes: the Student class (Student.h + Student.cpp), the Department class (Department.h + Department.cpp), 4 socket implementation files: serverA.cpp, serverB.cpp, servermain.cpp, client.cpp, as well as a makefile. Skeleton code was given by reference material: https://beej.us/guide/bgnet/html. On top of that I first designed a series of functions to realize server-end information storage and retrieval, then added corresponding receive/send function to each server end. Furthermore, while loops were added to realize continuous operations on message exchanging.


5) What my code files are and what each one of them does:
(1) - servermain.cpp: establishes a server-end socket that can continuously receive and send datagrams over the UDP sockets with back-end servers A&B. At the same time, it also establishes TCP connections with different clients.

(2) - serverA.cpp: establishes a server-end UDP socket that can store, receive and look up information in its database and send query results to the main server. Corresponding informational messages will be printed.

(3) - serverB.cpp: establishes a server-end UDP socket that can store, receive and look up information in its database and send query results to the main server. Corresponding informational messages will be printed.

(4) - client.cpp: establishes TCP connection with the main server. It collects department name and student id information from user, send it to the main server and wait for the message to be sent back from the latter over TCP, and finally print the received message. Apart from that, a few informational messages will be printed.

(5) - makefile: makefile to compile the program.

(6) - Student.cpp: implementation code for class Student.

(7) - Student.h: header file for class Student.

(8) - Department.cpp: implementation code for class Department.

(9) - Department.h: header file for class Department.


6) The format of all the messages exchanged:
For TCP: Messages being exchanged are called streams.
For UDP: Messages being exchanged are called datagrams.
In terms of code implementation, messages were defined in the format of char, which was defined in ASICII. (During the sending/receiving process, the ASICII is converted to binary, and eventually to analog signals for physical transmission.)


7) Any idiosyncrasy of your project (It should say under what conditions the project fails, if any):
(1) My code follows all the assumptions written in the project assignment specs. Any condition other than those will trigger undefined behavior.
(2) When you type in "make", all the files will be compiled only (program will not run). To run serverA program, open a new terminal and type in "./serverA". To run serverB program, open a new terminal and type in "./serverB". To run the main server program, open a new terminal and type in "./servermain". To run the client program, open a new terminal and type in "./client". To successfully run the wholel program, one must follow this order, namely, serverA -> serverB -> servermain -> client.
(3) Please notice that since file names "dataA.csv" & "dataB.csv" were hardcoded to the program, one should always make sure these files exist in the same folder of the code file. Otherwise program will fail to work as expected.
(4) The assumption is that users are not allowed to put any parameter or value or string or character as a commandline argument. Doing so will cause undefined behavior.
(5) PLEASE put in integer on prompt of "Enter student id: ". Any input other than an integer will trigger undefined behavior.
(6) If there's only one student in a back-end server, "Friend Recommendation: " will print "Friend Recommendation: null".


8) Reused Code: Did you use code from anywhere for your project? If not, say so. If so, say what functions and where they're from. (Also identify this with a comment in the source code):
Yes.
Starter code is given by "https://beej.us/guide/bgnet/html/".
Function split() is adapted from code provided by "https://stackoverflow.com/questions/14265581/parse-split-a-string-in-c-using-string-delimiter-standard-c".


9) Extra Credit:
I did the extra credit part, where the friend finding funciton is achieved by implementing the cosine similarity algorithm.
The basic idea is that we compare two students based on their scores' cosine similarity by using the Euclidean dot product formula on their score arrays. The greater the value, the more similar are they. Pay special notice that when scores are lacking in reading the data files, data processing function will insert -100 to the socre set as a place holder, for the convenience of calculating cosine similarity between two students. Actually, -100 also makes sense numerically since every student is treated the same way. Since cosine similarity is about finding the relative value, and when comparing two student's academic performances, it matters if the two students are choosing different courses. Hence, -100 can be used as an indication of similarity between students.
To that end I designed several helper functions that can first retrieve all the students in the same server, sort them by student id in increasing order. When given a student id to find a friend, use a function to loop through the student list, calculate each element's cosine similarity with the given student, and find the member that yields the maximum similarity.
Note that if there's only one student in a back-end server, "Friend Recommendation: " will print "Friend Recommendation: null".
